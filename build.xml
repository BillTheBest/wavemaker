<!--
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<project name="root" default="all" basedir=".">
    <description>
        top-top level build file; mostly for automated builds?
    </description>

    <!-- Depended on by trunk/build.xml cleanall -->
    <target name="clean" description="calls clean on installer, dev/build.xml and dev/build-dist.xml">
      <echo>Start of clean in trunk/build.xml</echo>
        <ant dir="dev" target="clean"/>
        <ant dir="installer" target="clean"/>
        <ant dir="dev" antfile="build-dist.xml">
            <target name="clean"/>
        </ant>
    </target>

    <!-- Currently cleanall is just clean + wiping out our compressed javascript library -->
    <target name="cleanall" depends="clean" description="depends on clean; calls dev/build.xml cleanall">
      <echo>Start of cleanall in trunk/build.xml</echo>
        <ant dir="dev" target="cleanall"/>
    </target>


    <target name="test" description="Same as running build.xml test, but first sets up the mysql database">
        <ant dir="dev" target="test-setup"/>
        <ant dir="dev" target="test"/>
    </target>

    
    <target name="skiptest" description="Fast build of project and installer that skips testing">
        <ant dir="dev" antfile="build-dist.xml">
            <target name="build-source"/>
            <target name="build"/>
        </ant>

        <ant dir="installer">
            <target name="build"/>
        </ant>
    </target>

    <target name="old_all" description="full CC installer test &amp; build">
      <property name="fullbuild" value="true" />
	<echo>trunk/build.xml: Call trunk/dev/build.xml test-setup and test; 
We should see the following sequence:
1. Calls test-setup (dev/build.xml)
   1. Calls test-setup (dev/core/build.xml)
       1. Depends on "buildtest"
          1. Depends on "build"
              1. Calls build on all build files in core subfolders
	  2. Runs buildtest on all build files in core subfolders
2. Calls test (dev/build.xml)
   1. depends on "buildtest"
      1. depends on "build"
          1. depends on "clean"
             1. depends on "undeploy"
                 1. Calls "undeploy" (dev/studio/build.xml)
          2. Calls "build" on dev/studio/build.xml
              1. depends on "refresh" (Copies jar files into WEB-INF/lib)
	      2. depends on "setup-webinf-xml" (Edits xml files in WEB-INF; MK added this)
              3. depends on "setup-js-html" (Edits config.js and Studio.html; MK added this)
              4. Compiles all java web services
          3. Calls "jar" on launcher, modules and core
      2. Call buildtest on core, modules, studio and launcher
   2. Calls test-all on core, test on modules, studio and launcher
After this we are done with the "buildtest" and "test" calls
</echo>
        <ant dir="dev">
	    <!-- Setup for testing; primarily means setting up a mysql database -->
            <target name="test-setup"/>

	    <!-- Run the tests; note that "tests" depends indirectly on "build" so this command will build the project -->
            <target name="test"/>
        </ant>

	<echo>trunk/build.xml: Call trunk/dev/build-dist.xml build-source and build
1. Calls build-source (dev/build-dist.xml)
   1. Depends on "common.generate-full-version"
      1. Depends on -common.init.version which creates the build folder
      2. Depends on -common.version.do-svn
          1. Depends on -common.init.version: recreates the build folder?
          2. Generates LICENSE FILE if certain conditions exist
      3. Depends on -common.version.do-non-svn: Generates LICENSE FILE if certain conditions exist
      4. Generates LICENSE file IF it hasn't already been generated
   2. Depends on "common.generate-license": Copies in a license file if one hasn't been generated
      1. At long last, we create the build folder?!?
      2. Creates source tarball
2. Calls build (dev/build-dist.xml)      
   1. Depends build-js: builds the javascript compressed file
   2. Delete CloudDB.properties to insure its regenerated
   3. Calls dev/build.xml "clean"
      1. Depends on "undeploy" which undeploy's studio
      2. Delete's the build folder (LICENSE FILE IS IN BUILD FOLDER; LIKELY POINT OF FAILURE)
      3. Calls dev/studio/build.xml "cleanall"
         1. Depends on "clean"
             1. Delete's WEB-INF/classes
             2. Delete's ${build.dir}/studio
             3. Delete's webapproot/javadoc
         2. Delete's WEB-INF/lib
    4. Calls dev/build.xml "build"  (NOTE THIS WAS RUN WHILE BUILDING THE TEST)
    5. Calls dev/build.xml "javadoc"
         1. Calls javadoc on dev/core
             1. Depends on dev/core/build.xml "build" (AGAIN)
             2. Calls dev/core/runtime/build.xml "javadoc"
	        1. Depends on "build" (AGAIN)
         2. Calls dev/modules/build.xml "javadoc"
         3. Calls dev/studio/build.xml "javadoc"
         4. Calls dev/launcher/build.xml "javadoc"
    6. Calls "fakeCloudDB" which optionally replaces fake username/password in CloudDB.properties
    7. Calls launcher/build.xml "dist"
         1. This causes the whole launcher set of dependencies to compiles; not going to look into this file today
    8. Creates folder build/dist and copies in webapproot
</echo>
        <ant dir="dev" antfile="build-dist.xml">
            <target name="build-source"/>
            <target name="build"/>
        </ant>

	<echo>trunk/build.xml: Call trunk/installer/build.xml build</echo>
        <ant dir="installer">
            <target name="build"/>
        </ant>
    </target>



    <target name="all" description="full CC installer test &amp; build">
<echo>
********************************************************************************************************************************************************
STARTING BUILD STARTING BUILD STARTING BUILD STARTING BUILD STARTING BUILD STARTING BUILD STARTING BUILD 
********************************************************************************************************************************************************
</echo>
        <ant dir="dev" antfile="build.xml">
            <target name="cleanall"/>
        </ant>

	<!-- Prevent dev/build.xml "clean" from running again -->
	<property name="dev-clean-complete" value="true" />
	<property name="dev-cleanall-complete" value="true" />

        <ant dir="dev" antfile="build.xml">
            <target name="build"/>
        </ant>

	<!-- Prevent dev/build.xml "build" from running again -->
	<property name="build-complete" value="true" />

<echo>
********************************************************************************************************************************************************
STARTING TEST STARTING TEST STARTING TEST STARTING TEST STARTING TEST STARTING TEST STARTING TEST 
********************************************************************************************************************************************************
</echo>

        <ant dir="dev">
	    <!-- Setup for testing; primarily means setting up a mysql database -->
            <target name="test-setup"/>

	    <!-- Run the tests; note that "tests" depends indirectly on "build" so this command will build the project -->
            <target name="test"/>
        </ant>
<echo>
********************************************************************************************************************************************************
STARTING BUIDL-DIST STARTING BUIDL-DIST STARTING BUIDL-DIST STARTING BUIDL-DIST STARTING BUIDL-DIST STARTING BUIDL-DIST
********************************************************************************************************************************************************
</echo>

        <ant dir="dev" antfile="build-dist.xml">
            <target name="build"/>
            <target name="build-source"/>
        </ant>

<echo>
********************************************************************************************************************************************************
STARTING INSTALLER STARTING INSTALLER STARTING INSTALLER STARTING INSTALLER STARTING INSTALLER STARTING INSTALLER STARTING INSTALLER 
********************************************************************************************************************************************************
</echo>
	<echo>trunk/build.xml: Call trunk/installer/build.xml build</echo>
        <ant dir="installer">
            <target name="build"/>
        </ant>
    </target>


</project>
