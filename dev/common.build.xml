<!--
   Copyright (C) 2011 VMWare, Inc. All rights reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<project name="shared" default="" basedir=".">
    <description>

        This ant script is a repository of common tasks and resource.  
        It is imported by other ant files in the system.

        Before importing this script, the ant property "root.dir" must be
        set to point to the directory this script is in.  For example:

        <!--
        <property name="root.dir" location=".."/>
        <import file="${root.dir}/common.build.xml"/>
        -->

        For better readability, all resource defined in this ant script 
        start with the prefix "common.".

    </description>

    <property environment="env"/>
    <property file="${root.dir}/common.env.build.properties"/>
    <property file="${root.dir}/common.build.properties"/>

     <condition property="wm.isEnterprise.property">
        <equals arg1="${project.type}" arg2="${project.type.enterprise}"/>
    </condition>

    <condition property="wm.isCommunity.property">
        <equals arg1="${project.type}" arg2="${project.type.community}"/>
    </condition>

   <condition property="common.modules.isCommunity">
        <equals arg1="${project.type}" arg2="${project.type.community}"/>
    </condition>
    <condition property="common.modules.isEnterprise">
        <equals arg1="${project.type}" arg2="${project.type.enterprise}"/>
    </condition>

    <patternset id="common.modules.patternset">
        <!-- cloud modules -->
        <include name="${module.wm.cloud.name}/**"
                if="common.modules.isCloud"/>

        <!-- local-only modules -->
        <include name="${module.wm.local.name}/**"
                if="common.modules.isCommunity"/>

        <!-- enterprise-only modules -->
        <include name="${module.wm.local.name}/**"
                if="common.modules.isEnterprise"/>
        <include name="${module.wm.rbac.name}/**"
                if="common.modules.isEnterprise"/>
        <include name="${module.wm.oracle.name}/**"
                if="common.modules.isEnterprise"/>
        <include name="${module.wm.db2.name}/**"
                if="common.modules.isEnterprise"/>
        <include name="${module.wm.mssql.name}/**"
                if="common.modules.isEnterprise"/>
        <include name="${module.wm.ldap.name}/**"
                if="common.modules.isEnterprise"/>
        <include name="${module.wm.josso.name}/**"
                if="common.modules.isEnterprise"/>
        <include name="${module.wm.multitenant.name}/**"
                if="common.modules.isEnterprise"/>
    </patternset>

    <fileset id="common.modules.fileset" dir="${modules.dir}">
        <patternset refid="common.modules.patternset"/>
    </fileset>

    <propertyset id="common.test.properties">
        <propertyref prefix="wm."/>
    </propertyset>

    <target name="common.whichclass">
        <property name="class" value=""/>
        <whichresource property="location" class="${class}">
            <classpath>
                <filelist refid="common.api.jars"/>
                <filelist refid="common.runtime.jars"/>
                <filelist refid="common.tools.jars"/>
            </classpath>
        </whichresource>
        <echo>location of ${class}: ${location}</echo>
    </target>

    <target name="common.projecthelp">
        <java classname="org.apache.tools.ant.Main">
            <arg value="-f"/>
            <arg value="${basedir}/build.xml"/>
            <arg value="-projecthelp"/>
        </java>
        <echo>
            $${build.dir} resolves to "${build.dir}"
            It can set using the environment variable BUILDDIR,
            or the ant property build.dir
        </echo>
    </target>

    <target name="common.generate-best-license" depends="common.generate-full-version, common.generate-license" />

    <target name="common.generate-license" unless="license.generated">
        <!-- Use LICENSE.txt -->
        <copy file="${src.buildsupport.dir}/LICENSE.txt"
                tofile="${license.file}"/>
                <property name="license.generated" value="true"/>
    </target>

    <target name="-common.init.version">
        <condition property="-common.init.version.svn-exists">
            <available file="${root.dir}/../.svn"/>
        </condition>
        <mkdir dir="${build.dir}"/>
    </target>

    <target name="-common.version.do-svn"
            depends="-common.init.version"
            if="-common.init.version.svn-exists">
        <exec outputproperty="gfv.svn.revision.range" executable="svnversion"
                failonerror="false" failifexecutionfails="false">
            <arg value="${root.dir}/.."/>
        </exec>
        <echo>XXX svnversion: ${gfv.svn.revision.range}</echo>
        <exec outputproperty="gfv.svn.repository.url.temp" executable="svn"
                failonerror="false" failifexecutionfails="false">
            <arg value="info"/>
            <arg value="${root.dir}/.."/>
        </exec>
        <echo>XXX svnversion: ${gfv.svn.repository.url.temp}</echo>
        <exec outputproperty="gfv.svn.repository.url" executable="grep"
                inputstring="${gfv.svn.repository.url.temp}" failonerror="false"
                failifexecutionfails="false">
            <arg value="^URL"/>
            <arg value="-"/>
        </exec>
        <echo>XXX svnversion: ${gfv.svn.repository.url}</echo>

        <property name="gfv.svn.revision.range" value="Not Found"/>
        <property name="gfv.svn.repository.url" value="NON-SVN BUILD - or svn executable not found"/>
    </target>
    
    <target name="-common.version.do-non-svn"
            depends="-common.init.version"
            unless="-common.init.version.svn-exists">
        <property name="gfv.svn.revision.range" value="NON-SVN BUILD"/>
        <property name="gfv.svn.repository.url" value="NON-SVN BUILD"/>
    </target>

    <target name="common.generate-full-version" unless="version.full"
            depends="-common.init.version,-common.version.do-svn,-common.version.do-non-svn">

     <echo>Version: ${version.number} WRITTEN TO FILE: ${version.file}</echo>
     <echo file="${version.file}">Version: ${version.number}
SVN version: ${gfv.svn.revision.range}
Build number: ${env.BUILD_NUMBER}
Job name: ${env.JOB_NAME}
SVN ${gfv.svn.repository.url}
        </echo>

     <echo>Version: ${version.number} WRITTEN TO FILE: ${version.project.file}</echo>
     <echo file="${version.project.file}">Version: ${version.number}
SVN version: ${gfv.svn.revision.range}
     </echo>
     <property name="version.full"
        value="Version: ${version.number}\nSVN url: ${generate-full-version.svn.url}\nSVN version: ${generate-full-version.svn.rev}"/>
    </target>
</project>
