<!--
   -  Copyright (C) 2011 VMWare, Inc. All rights reserved.
   -
   -  Licensed under the Apache License, Version 2.0 (the "License");
   -  you may not use this file except in compliance with the License.
   -  You may obtain a copy of the License at
   -     http://www.apache.org/licenses/LICENSE-2.0
   -  Unless required by applicable law or agreed to in writing, software
   -  distributed under the License is distributed on an "AS IS" BASIS,
   -  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   -  See the License for the specific language governing permissions and
   -  limitations under the License.
->
<project name="tools" default="build" basedir=".">

    <property name="root.dir" location="../.."/>
    <import file="${root.dir}/common.build.xml"/>

    <property file="build.properties"/>

    <path id="build.classpath">
        <path location="${classes.runtime.dir}"/>
        <filelist refid="common.runtime.jars"/>
        <filelist refid="common.tools.jars"/>
        <filelist refid="common.common.jars"/>
        <filelist refid="common.json.jars"/>
        <path location="${classes.common.dir}"/>
        <path location="${classes.json.dir}"/>
    </path>

    <path id="test.build.classpath">
        <path refid="build.classpath"/>
        <path location="${test.classes.runtime.dir}"/>
        <path location="${classes.tools.dir}"/>
        <path location="${classes.testsupport.dir}"/>
        <path location="${test.classes.common.dir}"/>
        <path location="${test.classes.json.dir}"/>
	<pathelement location="${junit.jar}"/>
        <filelist refid="common.testsupport.jars"/>
    </path>

    <path id="test.run.classpath">
        <path refid="test.build.classpath"/>
        <path location="${test.classes.tools.dir}"/>
        <path location="${runtime.test.module_baz.jar}"/>
    </path>

    <path id="datatest.run.classpath">
        <!-- should not have runtime com.wavemaker.runtime.data.sample package.
             instead, uses infra jar -->
        <path refid="build.classpath"/>
        <path location="${classes.tools.dir}"/>
        <path location="${classes.testsupport.dir}"/>
        <filelist refid="common.testsupport.jars"/>
        <path location="${test.classes.tools.dir}"/>
        <path location="${test.runtime.infra.jar}"/>
        <path location="${test.classes.common.dir}"/>
	<pathelement location="${junit.jar}"/>
    </path>

    <target name="help" depends="common.projecthelp" 
            description="Information about available targets"/>

    <target name="clean" description="Remove class files">
        <delete dir="${build.tools.dir}"/>
        <delete file="${wmtools.jar}"/>
    </target> 

    <target name="jaxb-servicedefs"
            description="generate service definition JAXB file" depends="build-boolean-getter">
        <xjc schema="src/com/wavemaker/tools/service/definitions/servicedefinitions.xsd"
                package="com.wavemaker.tools.service.definitions"
                destdir="src"
                extension="true">
            <arg value="-Xboolean-getter"/>
            <depends file="src/com/wavemaker/tools/service/definitions/servicedefinitions.xsd" />
            <produces dir="src/com/wavemaker/tools/service/definitions">
                <include name="*.java"/>
            </produces>
        </xjc>
    </target>

    <target name="jaxb-webapp"
            description="generate webapp schema" depends="build-boolean-getter">
        <xjc schema="src/com/wavemaker/tools/webapp/schema/web-app_2_4.xsd"
                package="com.wavemaker.tools.webapp.schema"
                destdir="src"
                extension="true">
            <arg value="-Xboolean-getter"/>
            <depends file="src/com/wavemaker/tools/webapp/schema/web-app_2_4.xsd" />
            <produces dir="src/com/wavemaker/tools/webapp/schema">
                <include name="*.java"/>
            </produces>
        </xjc>
    </target>

    <target name="jaxb-spring" description="generate Spring Config Beans JAXB file"
            depends="build-boolean-getter">
        <xjc schema="src/com/wavemaker/tools/spring/beans/spring-beans-2.0.xsd"
                package="com.wavemaker.tools.spring.beans"
                destdir="src"
                extension="true">
            <arg value="-Xcollection-setter-injector"/>
            <arg value="-Xboolean-getter"/>
            <depends file="src/com/wavemaker/tools/spring/beans/spring-beans-2.0.xsd" />
            <produces dir="src/com/wavemaker/tools/spring/beans">
                <include name="*.java"/>
            </produces>
        </xjc>
    </target>

    <target name="build-boolean-getter"
            description="Compile the boolean-getter stuff before the rest of tools">
        <mkdir dir="${classes.tools.dir}"/>
        <javac srcdir="${src.tools.dir}" 
               destdir="${classes.tools.dir}" 
               target="${javac.target}"
               encoding="${javac.encoding}"
               debug="${javac.debug}"
               includes="com/wavemaker/tools/ws/jaxb/boolean_getter/*.java"
               >
            <classpath refid="build.classpath"/>
        </javac>
        <copy todir="${classes.tools.dir}">
            <fileset dir="${src.tools.dir}">
                <include name="META-INF/services/com.sun.tools.xjc.Plugin"/>
            </fileset>
        </copy>

        <!-- we need to define this after we've built the support libraries -->
        <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
            <classpath>
                <path location="${jaxb-xjc.jar}"/>
                <path location="${collection-setter-injector.jar}"/>
                <path location="${simple-regenerator-1.0.jar}"/>
                <pathelement location="${classes.tools.dir}"/>
            </classpath>
        </taskdef>
    </target>

    <target name="jaxb" depends="jaxb-servicedefs,jaxb-webapp,jaxb-spring"
            description="convenience method to run all jaxb targets"/>

    <target name="build" description="Compile tools"
            depends="common.generate-full-version">
		<mkdir dir="${src.temp.root.dir}/tools"/>
		<copy todir="${src.temp.root.dir}/tools" overwrite="yes">
			<fileset dir="${src.tools.dir}">
				<exclude name="**/salesforce/**" unless="common.modules.isEnterprise"/>
			</fileset>
		</copy>
		<antcall target="overwrite-with-dummies"/>
        <mkdir dir="${classes.tools.dir}"/>
        <javac srcdir="${src.temp.root.dir}/tools" 
               destdir="${classes.tools.dir}" 
               target="${javac.target}"
               encoding="${javac.encoding}"
               debug="${javac.debug}">
            <classpath refid="build.classpath"/>
        </javac>
        <copy todir="${classes.tools.dir}">
            <fileset dir="${src.tools.dir}">
                <include name="com/wavemaker/tools/service/primitive_types.xml"/>
                <include name="**/*.ftl"/>
                <include name="**/*.dtd"/>
                <include name="**/*.xml"/>
                <include name="com/wavemaker/tools/ws/soapenc.xsd"/>
                <include name="com/wavemaker/tools/security/login-template.html"/>
				<include name="com/wavemaker/tools/cloudmgr/rackspace/cloud.properties"/>
				<include name="com/wavemaker/tools/cloudmgr/rackspace/MIME.types"/>
                <include name="META-INF/services/com.sun.tools.xjc.Plugin"/>
            </fileset>
        </copy>
	<ant dir="${root.dir}" antfile="common.build.xml" target="common.generate-full-version" />
        <copy file="${version.file}"
                tofile="${classes.tools.dir}/com/wavemaker/tools/project/version"/>
    </target>

	<target name="overwrite-with-dummies" unless="common.modules.isEnterprise"
		description="Copy dummy java source to temp dir">
		<copy todir="${src.temp.root.dir}/tools" overwrite="yes">
			<fileset dir="${src.tools.dummy.dir}">
			</fileset>
		</copy>
	</target>

    <target name="jar" depends="build,zip-templateapp">
        <path id="manifestcp">
            <pathelement location="${wmruntime.jar}"/>
            <filelist refid="common.tools.jars"/>
        </path>
        <pathconvert refid="manifestcp" pathsep=" " property="cp">
            <mapper type="flatten"/>
        </pathconvert>
        <mkdir dir="${lib.dir}"/>
        <jar destfile="${wmtools.jar}" basedir="${classes.tools.dir}">
            <manifest>
                <attribute name="Class-Path" value="${cp}"/>
            </manifest>
        </jar>
    </target>

    <target name="zip-templateapp" depends="build">
        <zip destfile="${templateapp.zip}">
            <fileset dir="${tools.dir}/templates/templateapp">
                <exclude name="**/.svn/**/*.*"/>
            </fileset>
            <fileset dir="${runtime.dir}">
                <include name="src/log4j.properties"/>
            </fileset>
        </zip>
    </target>

    <target name="buildtest" depends="build" description="Compile tests">
        <mkdir dir="${test.classes.tools.dir}"/>
        <javac srcdir="${test.src.tools.dir}" 
               destdir="${test.classes.tools.dir}" 
               target="${javac.target}"
               encoding="${javac.encoding}"
               debug="${javac.debug}">
            <classpath refid="test.build.classpath"/>
        </javac>
        <copy todir="${test.classes.tools.dir}">
            <fileset dir="${test.src.tools.dir}">
                <include name="pkfk.spring.xml"/>
                <include name="com/wavemaker/tools/**/*.xml"/>
                <include name="com/wavemaker/tools/**/*.smd"/>
                <include name="com/wavemaker/tools/data/hsqldb/**"/>
                <include name="com/wavemaker/tools/project/upgrade/swamis/webinfactivegridupgrade/**"/>
                <include name="com/wavemaker/tools/project/*.txt"/>
                <include name="com/wavemaker/tools/project/*.html"/>
                <include name="com/wavemaker/tools/project/**/*.js"/>
                <include name="com/wavemaker/tools/project/**/*.expected"/>
                <include name="com/wavemaker/tools/project/pages/**"/>
                <include name="com/wavemaker/tools/javaservice/Foo-debug.jar"/>
                <include name="com/wavemaker/tools/javaservice/Foo-nodebug.jar"/>
                <include name="com/wavemaker/tools/ant/copyruntime*.jar"/>
            </fileset>
        </copy>

        <jar destfile="${sakila-test.jar}"
             basedir="${test.classes.runtime.dir}"
             includes="com/wavemaker/runtime/data/sample/sakila/*"/>

        <jar destfile="${sakila-test.jar}" basedir="${test.classes.tools.dir}"
             includes="pkfk.spring.xml,com/wavemaker/tools/data/comppkfktest/*"
             update="true"/>

        <jar destfile="${sakila-test.jar}" basedir="${test.classes.runtime.dir}"
             update="true">
            <include name="sakila.spring.xml"/>
            <include name="mysql_sakila.properties"/>
            <include name="mysql.properties"/>
        </jar>

        <jar destfile="${aghr-test.jar}"
             basedir="${test.classes.runtime.dir}"
             includes="com/wavemaker/runtime/data/sample/aghr/*"/>

        <jar destfile="${aghr-test.jar}" basedir="${test.classes.runtime.dir}"
             update="true">
            <include name="aghr.spring.xml"/>
            <include name="mysql_aghr.properties"/>
            <include name="mysql.properties"/>
        </jar>

    </target>

    <target name="test-all" depends="test, test-data"
            description="Run all tests"/>

    <target name="test" depends="buildtest" description="Run unit tests">
        <antcall target="junit"/>
    </target>

    <target name="test-data" depends="buildtest" description="Run data tests">
        <taskdef name="lockSemaphore"
                classname="com.wavemaker.testsupport.ant.LockSemaphoreAntTask"
                classpathref="test.run.classpath"/>
        <taskdef name="unlockSemaphore"
                classname="com.wavemaker.testsupport.ant.UnlockSemaphoreAntTask"
                classpathref="test.run.classpath"/>

        <lockSemaphore semaphoreName="ant-tools-test-data-semaphore"
                propName="tools.test-data.semaphore.value"
                iterations="5000" sleepTime="500"/>
        <echo>semaphore data locked; name ant-tools-test-data-semaphore</echo>
        <echo>\tsemaphore key ${tools.test-data.semaphore.value}</echo>
        <antcall target="junit">
            <param name="test.include" value="com/wavemaker/tools/data/**/Test*"/>
            <param name="test.exclude" value=""/>
            <param name="test.classpathid" value="datatest.run.classpath"/>
        </antcall>
        <unlockSemaphore semaphoreReturn="${tools.test-data.semaphore.value}"/>
    </target>

    <target name="junit">
        <mkdir dir="${build.test.report.dir}"/>
        <property name="test.classpathid" value="test.run.classpath"/>
        <property name="test.include" value="**/*Test*"/>
        <property name="test.exclude" value="com/wavemaker/tools/data/**"/>
        <junit printsummary="on"
               fork="true"
               forkmode="once"
               haltonfailure="false"
               showoutput="true">
            <classpath refid="${test.classpathid}"/>
            <formatter type="plain" usefile="false"/>
            <formatter type="xml" usefile="true"/>
            <batchtest todir="${build.test.report.dir}">
                <fileset dir="${test.classes.tools.dir}">
                    <include name="${test.include}"/>
                    <exclude name="${test.exclude}"/>
                    <exclude name="com/wavemaker/**/infra/**"/>
                    <exclude name="**/*$*"/>

                    <!-- Work in progress for testing various dbs -->
                    <exclude name="com/wavemaker/tools/data/TestAdventureCRUD*"/>
                    <exclude name="com/wavemaker/tools/data/TestDB2CRUD**"/>
                    <exclude name="com/wavemaker/tools/data/TestOrahrCRUD**"/>
                </fileset>
            </batchtest>

            <syspropertyset>
                <propertyset refid="common.test.properties"/>
            </syspropertyset>            
        </junit>    
    </target>

</project>
