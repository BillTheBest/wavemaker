<project name="studio" default="redeploy" basedir=".">

    <property name="root.dir" location=".."/>
    <import file="${root.dir}/common.build.xml"/>

    <property file="build.properties"/>

    <path id="build.classpath">
        <fileset dir="${lib.studio.dir}">
            <include name="*.jar"/>
        </fileset>
        <!-- include log4j.properties in classpath -->
        <pathelement location="${classes.studio.dir}"/>
    </path>



    <target name="all" description="Build wm core+studio, deploy studio"> 
        <!-- minimizes running targets over and over -->

        <!-- first build core jars -->
        <ant dir="${src.root.dir}" target="jar"/>

        <!-- then redeploy -->
        <antcall target="undeploy"/>
        <antcall target="deploy"/>
    </target>


   
    <path id="test.build.classpath">
        <path refid="build.classpath"/>
        <filelist refid="common.testsupport.jars"/>
        <pathelement location="${classes.testsupport.dir}"/>
        <pathelement location="${classes.studio.dir}"/>
        <pathelement location="${test.classes.common.dir}"/>
        <pathelement location="${test.classes.runtime.dir}"/>
        <pathelement location="${test.classes.tools.dir}"/>
    </path>
    
    <target name="clean" description="Delete WEB-INF/classes">
      <echo>Start of clean in studio/build.xml</echo>
        <delete dir="${classes.studio.dir}"/>
        <delete dir="${build.studio.dir}"/>
        <delete dir="${javadoc.studio.dir}"/>
        <delete file="${classes.studio.dir}/CloudDB.properties" />
    </target>

      <target name="tar-clean" description="Clean for building from tar file">
      <echo>Start of tar-clean in studio/build.xml</echo>
        <mkdir dir="${root.dir}/tmp" />
        <copy file="${classes.studio.dir}/CloudDB.spring.xml" todir="${root.dir}/tmp"/>
        <copy file="${classes.studio.dir}/CloudDB.properties" todir="${root.dir}/tmp"/>
        <copy file="${classes.studio.dir}/registrationService.spring.xml" todir="${root.dir}/tmp"/>
        <copy file="${classes.studio.dir}/UserService.spring.xml" todir="${root.dir}/tmp"/>
        <delete dir="${classes.studio.dir}"/>
        <copy file="${root.dir}/tmp/CloudDB.spring.xml" todir="${classes.studio.dir}"/>
        <copy file="${root.dir}/tmp/CloudDB.properties" todir="${classes.studio.dir}"/>
        <copy file="${root.dir}/tmp/registrationService.spring.xml" todir="${classes.studio.dir}"/>
        <copy file="${root.dir}/tmp/UserService.spring.xml" todir="${classes.studio.dir}"/>
        <delete dir="${root.dir}/tmp"/>
        <delete dir="${build.studio.dir}"/>
        <delete dir="${javadoc.studio.dir}"/>
    </target>
    
    
    <target name="cleanall" depends="clean" 
            description="Delete all compiled and copied artifacts">
      <echo>Step 1 (dev/studio/build.xml "cleanall") finished depends "clean"; now delete ${lib.studio.dir}</echo>
        <delete dir="${lib.studio.dir}"/>
      <echo>Step 2 (dev/studio/build.xml "cleanall") finished deletion; exiting "cleanall"</echo>
    </target>
    
    <target name="tar-cleanall" depends="tar-clean" 
            description="Delete all compiled and copied artifacts except a few spring xml files for building from tar ball">
      <echo>Step 1 (dev/studio/build.xml "cleanall") finished depends "tar-clean"; now delete ${lib.studio.dir}</echo>
        <delete dir="${lib.studio.dir}"/>
      <echo>Step 2 (dev/studio/build.xml "cleanall") finished deletion; exiting "cleanall"</echo>
    </target>


    <target name="setup-webinf-xml">
      <copy tofile="${webinf.studio.dir}/web.xml" file="${src.root.dir}/tools/templates/web.xml" overwrite="true" />
      <replaceregexp match="isCloud(\S*)(false|true)" replace="isCloud\1${wm.isCloud.variable}" file="${webinf.studio.dir}/web.xml" />

    <condition
	 	   property="wm.security.enabled.string" 
	  	 value="studio-security.xml"
	  	 else="studio-security-empty.xml">
	  	 <equals arg1="${project.type}" arg2="${project.type.cloud}" />
    </condition>
				   
    <replaceregexp file="${webinf.studio.dir}/studio-springapp.xml" 
		     match="(studio\-security\.xml|studio\-security\-empty\.xml)" 
		     replace="${wm.security.enabled.string}" />

	      <!-- Start section for updating session-expiration in web.xml -->
        <condition property="session.timeout" value="60" else="20160">
	      <equals arg1="${project.type}" arg2="${project.type.cloud}" />
      </condition>

	<echo>REPLACE ${webinf.studio.dir}/web.xml, SET VALUE ${session.timeout}</echo>
        <replaceregexp file="${webinf.studio.dir}/web.xml" match="(.session-timeout.)\d+(./session-timeout.)" replace="\1${session.timeout}\2" />
	<!-- End section for updating session-expiration in web.xml -->

    </target>

    <target name="setup-js-html">
        <replaceregexp file="${webapproot.studio.dir}/app/config.js" match="studioVersion\: '(.*)'," replace="studioVersion: '${version.number} - ${project.type}'," />

        <copy file="${studio.dir}/webapproot/pages/Studio/Studio.html.template"
                tofile="${studio.dir}/webapproot/pages/Studio/Studio.html"
                overwrite="true">
            <filterset>
                <filter token="VERSION" value="${version.number} - ${project.type}"/>
            </filterset>
        </copy>
    </target>

    <target name="build" depends="refresh, setup-webinf-xml, setup-js-html">
	  <echo>* Start of dev/studio/build.xml target="build"; 
	    depends on "refresh" and "setup-webinf-xml" and "setup-js-html".  
	    Compiles all java classes</echo>


        <taskdef name="servicedefc"
                 classname="com.wavemaker.tools.ant.ServiceDefCompilerTask"
                 classpathref="build.classpath"/>
        <taskdef name="configc"
            classname="com.wavemaker.tools.ant.ConfigurationCompilerTask"
            classpathref="build.classpath"/>

        <mkdir dir="${classes.studio.dir}"/>
        <javac srcdir="${src.studio.dir}" 
               destdir="${classes.studio.dir}" 
               target="${javac.target}"
               encoding="${javac.encoding}"
               debug="${javac.debug}">
            <classpath refid="build.classpath"/>
        </javac>

        <!-- REVIEW 12-Sep-08 stoens@wavemaker.com
        this is the least efficient way of doing this, fix with single 
        invocations of javac/servicedefc -->
        <buildservice servicename="CloudDB" 
                      serviceclass="com.wavemaker.studio.clouddb.CloudDB"/>
    		<buildservice servicename="cloudServerService" 
                      serviceclass="com.wavemaker.studio.CloudServerService"/>
	    	<buildservice servicename="cloudStorageService" 
                      serviceclass="com.wavemaker.studio.CloudStorageService"/>
        <buildservice servicename="deploymentService" 
                      serviceclass="com.wavemaker.studio.DeploymentService"/>
        <buildservice servicename="dataService" 
                      serviceclass="com.wavemaker.studio.data.DataService"/>
        <buildservice servicename="javaService" 
                      serviceclass="com.wavemaker.studio.java.JavaService"/>
        <buildservice servicename="pagesService" 
                      serviceclass="com.wavemaker.studio.PagesService"/>
        <buildservice servicename="registrationService" 
                      serviceclass="com.wavemaker.studio.RegistrationService"/>
        <buildservice servicename="securityConfigService" 
                      serviceclass="com.wavemaker.studio.SecurityConfigService"/>
        <buildservice servicename="securityService" 
                      serviceclass="com.wavemaker.runtime.security.SecurityService"/>
        <buildservice servicename="securityServiceJOSSO" 
                      serviceclass="com.wavemaker.runtime.security.JOSSOSecurityService"/>
        <buildservice servicename="servicesService" 
                      serviceclass="com.wavemaker.studio.ServicesService"/>
        <buildservice servicename="resourceFileService" 
                      serviceclass="com.wavemaker.studio.ResourceFileService"/>
        <buildservice servicename="UserService" 
                      serviceclass="com.wavemaker.studio.cloud.UserService" />
        <buildservice servicename="studioService" 
                      serviceclass="com.wavemaker.studio.StudioService"/>
        <buildservice servicename="licensingService" 
                      serviceclass="com.wavemaker.studio.LicensingService"/>
        <buildservice servicename="webService" 
                      serviceclass="com.wavemaker.studio.ws.WebService"/>
 
        <configc projectroot="${studio.dir}" verbose="false">
            <resources>
                <fileset dir="${studio.dir}">
                    <include name="services/*/designtime/servicedef.xml"/>
                </fileset>
                <javaresource
                    name="com/wavemaker/runtime/service/runtimeServiceDef.xml"
                    classpathref="build.classpath"/>
            </resources>
        </configc>
    </target>


    <target name="buildtest" depends="build" description="Compile tests">
	<echo>Starting dev/studio/build.xml "buildtest"</echo>
        <mkdir dir="${test.classes.studio.dir}"/>
        <javac srcdir="${test.src.studio.dir}" 
               destdir="${test.classes.studio.dir}" 
               target="${javac.target}"
               encoding="${javac.encoding}"
               debug="${javac.debug}">
            <classpath refid="test.build.classpath"/>
        </javac>        

        <copy todir="${test.classes.studio.dir}">
            <fileset dir="${studio.dir}">
                <include name="webapproot/WEB-INF/*.xml"/>
            </fileset>
        </copy>

    	 <!--Avoid Could not find resource FileResource in testCopyModulesWithJarReferences</-->
    	     <copy todir="${test.classes.studio.dir}/com/wavemaker/studio/ant">
            <fileset dir="${lib.studio.dir}">
                <include name="wmruntime.jar"/>
            </fileset>	
        </copy>
    	
        <copy todir="${test.classes.studio.dir}">
            <fileset dir="${test.src.studio.dir}">
                <include name="**/foojar.jar"/>
                <include name="com/wavemaker/studio/project/upgrade/**/*.xml"/>
                <include name="com/wavemaker/studio/project/upgrade/**/*.files/**"/>
                <include name="com/wavemaker/studio/ant/copyruntime*.jar"/>
            </fileset>
        </copy>
	<echo>Ending dev/studio/build.xml "buildtest"</echo>
    </target>

    <target name="test" depends="buildtest"
            description="Run studio tests, requires running Tomcat">
        <mkdir dir="${build.test.report.dir}"/>
        <property name="test.include" value="com/wavemaker/studio/**/*Test*"/>
        <property name="test.exclude" value=""/>
        <junit printsummary="on"
               fork="true"
               forkmode="once"
               haltonfailure="false"
               showoutput="true">
            <classpath>
                <path refid="test.build.classpath"/>
                <pathelement location="${test.classes.studio.dir}"/>
            </classpath>
            <formatter type="plain" usefile="false"/>
            <formatter type="xml" usefile="true"/>
            <batchtest todir="${build.test.report.dir}">
                <fileset dir="${test.classes.studio.dir}">
                    <include name="${test.include}"/>
                    <exclude name="${test.exclude}"/>
                    <exclude name="com/wavemaker/**/infra/**"/>
                    <exclude name="**/*$*"/>
                </fileset>
            </batchtest>

            <!-- for module tests -->
            <sysproperty key="test.project.type" value="${project.type}"/>
            <syspropertyset>
                <propertyset refid="common.test.properties"/>
            </syspropertyset>
        </junit>    
    </target>

    <target name="redeploy" depends="undeploy, deploy" 
            description="(Re)deploy studio"/>

    <target name="deploy" depends="build">
        <property name="contextfile" value="${tmpdir}/studio.xml"/>
        <echo file="${contextfile}">
            <![CDATA[<Context docBase="${webapproot.studio.dir}"/>]]>
        </echo>
        <taskdef name="deploy"
            classname="org.apache.catalina.ant.DeployTask"
            classpath="${catalina-ant.jar}"/>
        <deploy url="${tomcat.manager.url}"
            username="${tomcat.manager.username}"
            password="${tomcat.manager.password}"
            path="${studio.contextroot}"
            config="${contextfile}"
            failonerror="false"/>
        <delete file="${contextfile}"/>
    </target>

    <target name="undeploy">
        <taskdef name="undeploy"
            classname="org.apache.catalina.ant.UndeployTask"
            classpath="${catalina-ant.jar}"/>
        <undeploy url="${tomcat.manager.url}"
            username="${tomcat.manager.username}"
            password="${tomcat.manager.password}"
            path="${studio.contextroot}"
        failonerror="false"/>
    </target>

    <target name="refresh">
	  <echo>* Start of dev/studio/build.xml target="refresh"; 
	    Copies new jar files into studio/webapproot/WEB-INF/lib</echo>

        <mkdir dir="${lib.studio.dir}" />
        <copy todir="${lib.studio.dir}" flatten="true">
            <filelist refid="common.common.jars"/>
        </copy>
        <copy todir="${lib.studio.dir}" flatten="true">
            <filelist refid="common.json.jars"/>
        </copy>
        <copy todir="${lib.studio.dir}" flatten="true">
            <filelist refid="common.runtime.jars"/>
        </copy>
        <copy todir="${lib.studio.dir}" flatten="true">
            <filelist refid="common.tools.jars"/>
        </copy>
        <copy todir="${lib.studio.dir}">
            <fileset dir="${lib.dir}"/>
        </copy>
        <copy todir="${lib.studio.dir}" flatten="true">
            <fileset refid="common.modules.jars"/>
        </copy>
        <copy todir="${classes.studio.dir}" 
              file="${classes.runtime.dir}/log4j.properties"/>
        <copy todir="${classes.studio.dir}/"
            file="${studio.dir}/src/marker.resource.txt"/>
    </target>

    <target name="javadoc">
        <copy todir="${javadoc.studio.dir}">
            <fileset dir="${build.javadoc.dir}"/>
        </copy>
    </target>

    <target name="help" depends="common.projecthelp" 
            description="Information about available targets"/>

    <macrodef name="buildservice">
        <!-- compile service class(es), run servicedefc and copy -->
        <attribute name="servicename"/>
        <attribute name="serviceclass"/>
        <sequential>
        <if>
          <available file="${studio.dir}/services/@{servicename}/src" />
          <!--Service Exists -->
          <then>
            <javac srcdir="${studio.dir}/services/@{servicename}/src" 
                   destdir="${classes.studio.dir}" 
                   target="${javac.target}"
                   encoding="${javac.encoding}"
                   debug="${javac.debug}">        
                <classpath refid="build.classpath"/>
            </javac>
            <servicedefc projectRoot="${studio.dir}"
                         classesDir="${classes.studio.dir}">
                <service serviceId="@{servicename}"
                         serviceClass="@{serviceclass}"/>
            </servicedefc>
            <copy todir="${classes.studio.dir}">
                <fileset dir="services/@{servicename}/src">
                    <include name="**/*.xml"/>
                    <include name="**/*.properties"/>
                </fileset>            
            </copy>
           </then>
          </if>
          
        </sequential>
    </macrodef>

    <target name="compile-js" description="Compile js">
        <ant antfile="build-js.xml" target="build"/>
    </target>

    <target name="clean-js">
        <ant antfile="build-js.xml" target="clean"/>
    </target>

    <target name="jslint">
        <ant antfile="build-js.xml" target="jslint"/>
    </target>
</project>
