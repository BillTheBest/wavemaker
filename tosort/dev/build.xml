<!--
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<project name="root" default="all" basedir=".">

    <property name="root.dir" location="${basedir}"/>
    <import file="${root.dir}/common.build.xml"/>


    <target name="all" depends="clean,buildtest, deployWithBuild"
            description="Build product and tests, deploy studio">
		  <delete dir="${src.temp.root.dir}"/>
	  </target>

    <target name="tar-all" depends="tar-clean,buildtest, deployWithBuild"
            description="Build product and tests, deploy studio">
		  <delete dir="${src.temp.root.dir}"/>
	  </target>

  
    <target name="clean" depends="undeploy" unless="dev-clean-complete"
            description="Clean everything except js build">
      <property name="dev-clean-complete" value="true" />
      <echo>Start of clean in dev/build.xml</echo>
      <echo>Step 1 (dev/build.xml "clean"): 
FINISHED: depends "undeploy";
NEXT: delete ${build.dir}</echo>
        <delete dir="${build.dir}"/>

	<echo>Step 2 (dev/build.xml "clean"): 
FINISHED: delete ${build.dir};
NEXT: call cleanall on ${studio.dir}</echo>
        <ant dir="${studio.dir}" target="cleanall"/>
	<echo>Step 3 (dev/build.xml "clean"):
FINISHED: call to (studio/build.xml "cleanall"); 
NEXT: exiting "clean"</echo>
    </target>

    <target name="tar-clean" depends="undeploy" unless="dev-clean-complete"
            description="Clean everything except js build but save required spring xml files">
      <property name="dev-clean-complete" value="true" />
      <echo>Start of tar-clean in dev/build.xml</echo>
      <echo>Step 1 (dev/build.xml "tar-clean"): 
FINISHED: depends "undeploy";
NEXT: delete ${build.dir}</echo>
        <delete dir="${build.dir}"/>

	<echo>Step 2 (dev/build.xml "tar-clean"): 
FINISHED: delete ${build.dir};
NEXT: call tar-cleanall on ${studio.dir}</echo>
        <ant dir="${studio.dir}" target="tar-cleanall"/>
	<echo>Step 3 (dev/build.xml "clean"):
FINISHED: call to (studio/build.xml "tar-cleanall"); 
NEXT: exiting "tar-clean"</echo>
    </target>
    
    <!-- Currently cleanall is just clean + wiping out our compressed javascript library -->
    <target name="cleanall" depends="clean" description="Clean everything" unless="dev-cleanall-complete">
      <echo>Start of cleanall in dev/build.xml</echo>
      <echo>Step 1 (dev/build.xml "cleanall"): 
FINISHED: depends "clean"; 
NEXT: (studio/build-js "clean")</echo>
      <property name="dev-cleanall-complete" value="true" />
        <ant dir="${studio.dir}" antfile="build-js.xml" target="clean"/>
<!--        <delete file="${root.dir}/cached.build.properties" /> -->

      <echo>Step 2 (dev/build.xml "cleanall"): 
FINISHED: (build-js "clean"); 
NEXT: exiting "cleanall"</echo>
    </target>

    <!-- must still use -Dproduct.type=cloud when calling this -->
    <target name="fullcloudbuild" depends="cleanall,all">
	<chmod perm="a+rx" type="file" verbose="true" dir="${webapproot.studio.dir}" includes="*, **/**" />

<echo>try 2</echo>
	<chmod perm="a+rx" type="dir" verbose="true" dir="${webapproot.studio.dir}" includes="*,**/*" />
				   


	<tar destfile="${root.dir}/wm5webapproot.tar" basedir="${webapproot.studio.dir}" excludes="**/.svn" />
    </target>

    <target name="deployWithBuild" depends="undeploy, build"
            description="Build and deploy studio">
        <ant dir="${studio.dir}" target="deploy"/>
    </target>

    <target name="deploy" depends="undeploy"
            description="Build and deploy studio">
      <echo>WARNING: the deploy target has been redefined; its assumed you've already built studio before calling this, and does NOT have a dependency on you building studio</echo>
        <ant dir="${studio.dir}" target="deploy"/>
    </target>


    <target name="undeploy" description="Undeploy studio">
        <ant dir="${studio.dir}" target="undeploy"/>
    </target>

    <target name="build" depends="clean" description="Build all product code" unless="build-complete">
	  <echo>* Start of dev/build.xml target="build"</echo>
	  <echo>Step 1 (dev/build.xml "build"): 
FINISHED: depends "clean"; 
NEXT (${modules.dir} "build")</echo>
          <ant dir="${modules.dir}" target="build"/>

	  <echo>Step 2 (dev/build.xml "build"): 
FINISHED: (${modules.dir} "build"); 
NEXT: Compile everything in core</echo>
	<property name="build-complete" value="true" />


<!--
      <echo>Read cachefile from ${root.dir}/cached.build.properties</echo>
      <property file="${root.dir}/cached.build.properties" />

      <echo file="${root.dir}/cached.build.properties">cached.product.type=${project.type}</echo>
-->
      <!-- If these are not equal, then our last run was of a different type (or this is the first run) 
      <condition property="build.type.firstTime">
	<not><equals arg1="${cached.product.type}" arg2="${project.type}" /></not>
      </condition>
      <echo>DEBUG: build.type.firstTime: ${build.type.firstTime} (${cached.product.type} == ${project.type})</echo>
-->
        <ant dir="${src.root.dir}" target="jar"/>
        <ant dir="${modules.dir}" target="jar"/>
        <ant dir="${studio.dir}" target="build"/>
        <ant dir="${launcher.dir}" target="jar"/>

        <echo>Step 2 (dev/build.xml "build"): 
FINISHED: compiling core; 
NEXT: exiting "build"</echo>
    </target>

    <target name="buildtest" depends="build" 
            description="Build product code and tests" unless="buildtest-complete,skip.testing">

	<property name="buildtest-complete" value="true" />
	<echo>Starting dev/build.xml "buildtest"</echo>
	<echo>Starting ${src.root.dir}/build.xml "buildtest"</echo>
        <ant dir="${src.root.dir}" target="buildtest"/>       
	<echo>Starting ${modules.dir}/build.xml "buildtest"</echo>
        <ant dir="${modules.dir}" target="buildtest"/>       
	<echo>Starting ${studio.dir}/build.xml "buildtest"</echo>
        <ant dir="${studio.dir}" target="buildtest"/>       
	<echo>Starting ${launcher.dir}/build.xml "buildtest"</echo>
        <ant dir="${launcher.dir}" target="buildtest"/>       
	<echo>Ending dev/build.xml "buildtest"</echo>
    </target>

    <target name="javadoc" description="Run javadoc">
        <ant dir="${src.root.dir}" target="javadoc"/>       
        <ant dir="${modules.dir}" target="javadoc"/>       
        <ant dir="${studio.dir}" target="javadoc"/>
        <ant dir="${launcher.dir}" target="javadoc"/>
    </target>

    <!-- Sets up mysql database for testing -->
    <target name="test-setup" unless="skip.testing"
            description="Required to run once before tests run">
	  <echo>* dev/build.xml target test-setup Started; 
	    Task sets up mysql database for testing</echo>

        <ant dir="${src.root.dir}" target="test-setup"/>

	  <echo>* dev/build.xml target test-setup Finished</echo>

    </target>

    
    <target name="test" depends="buildtest" unless="skip.testing"
            description="Build and run all tests">
        <ant dir="${src.root.dir}" target="test-all"/>
        <ant dir="${modules.dir}" target="test"/>
        <ant dir="${studio.dir}" target="test"/>
        <ant dir="${launcher.dir}" target="test"/>

        <!-- create the test report -->

        <junitreport todir="${build.test.report.dir}">
            <fileset dir="${build.test.report.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.test.report.dir}/html"/>
        </junitreport>
        <echo>html report dir: ${build.test.report.dir}/html</echo>

    </target>

    <target name="help" depends="common.projecthelp" 
            description="Information about available targets"/>

</project>
