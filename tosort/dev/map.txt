Repo Map
========

eng3/trunk/dev/wavemaker
	- js: miscellaneous docs and the JsDoc toolkit, templates, and batch files to generate auto docs
	- studio
		- webapproot
			- app: source files related to Studio Application itself
				- buildUtil: files to feed the dojo build utility 
				- edit_area: 3rd party editor library "EditArea"
				- inspector: source for Inspector widget and subclasses
				- templates: ouput templates for publish targets, and widget Templates for the Palette
			- images: images we serve as part of Studio (and documentation)
			- jsdoc: DEPRECATED documentation generated from JsDoc  
			- lib: all framework (library) code
				- boot: bootstrap files for WM applications
					- images favicon and "loading" graphic
					- boot.css most basic css needed for "loading..." indicator
					- boot.js essential code needed to load all other dependencies
				- dojo: the dojo library 
				- wm: lib files that implement wm objects
					- base: the wm framework
						- components: source files for Components
						- data: source files for data handling code
						- design: source files for designer code
						- drag: source files for mouse dragging
						- layout: code to implement layouts
						- lib: miscellaneous low-level modules
						- styles: css and images for default style options
						- widget: source files for Widgets
						- *.js: the most basic framework source
					- common: files used by installer to set up user's 'common' folder
					- etc: miscellaneous other stuff
					- webjits: experimental code based on Adam Sah's DesignerWidget spec
				- runtimeLoader.js: set up some paths, manage debug options, loads manifest.js
				- manifest.js: controls exactly what files in "lib" will be loaded. This is where one manages support for alternate libraries like Kana and Palm 
			- pages: pages that implement WM Studio, including the main page "Studio"
				- Studio: 
					- Studio.js: essentially "main" for WM Studio. 
					- Studio.widgets.js: primarly layout for WM Studio 
				- *: various pages and dialogs
			- services: server goop
			- WEB-INF: server goop
			- index.html: Studio entry point
			- app.css: WM standard CSS file for application customization (emtpy)
			- types.js: WM data type information, generated by the server


/dev/core:	main Java repo
	- common: base common stuff, internalization (via Resources)
	- json: WM's JSON library, type definition
	- runtime: core server code
		runtime/src/*.xml: base Spring functionality - especially springapp.xml, managers.xml
			springapp.xml: imports other spring files, controller beans
			managers.xml: base managers
		runtime/src/com/wavemaker/runtime/server: controllers, server code
		runtime/src/com/wavemaker/runtime/services: support for services, PSTs, etc
		runtime/src/com/wavemaker/runtime/modules: module support
		runtime/src/com/wavemaker/runtime/data: hibernate/data service support
	- tools: support for studio
		tools/src/com/wavemaker/tools/ant: custom WM ant tasks
		tools/src/com/wavemaker/tools/services: design-time support for services (including DesignServiceManager)
		tools/src/com/wavemaker/tools/project: Project (the project in studio) support, which project is open, file reading & writing
		tools/src/com/wavemaker/tools/data: design-time for data services

/dev/studio/services: studio services
/dev/studio/webapproot/WEB-INF: studio web-inf
	studio-manager.xml: studio managers
	project-*: Ignore, these are generated by the build system
	studio-springapp.xml: main studio entry point, includes springapp.xml (from runtime) and other studio-specific files

/dev/modules: all modules


Bottom-Up Method of Understanding WM Framework
==============================================

The lowest level objects are described in the JsDocs (studio/webapproot/jsdoc/). Bottom-up review should proceed in this order:

- Object (basis for everything)
	- Component (basis for all palette Objects)
		- Widget (basis for all visual Components)
			- Container (basis for most Widgets that can hold other Widgets)
		- Variable (basis for all data storage)

Everything else grows out of these basic objects.
