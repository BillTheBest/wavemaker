/*
 * Copyright (C) 2012 VMWare, Inc. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PrjDirUpgradeDialog.java
 *
 * Created on Jan 5, 2011, 8:42:15 AM
 */

package com.wavemaker.desktop.launcher.ui;

import java.io.File;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * 
 * @author cconover
 */
public class PrjDirUpgradeDialog extends javax.swing.JFrame {

    private boolean normalClose = false;

    protected String version;

    protected File projectsDir;

    protected File existingDir;

    /** Creates new form PrjDirUpgradeDialog */
    public PrjDirUpgradeDialog(String version, File existingProjectsDirectory, File defaultProjectsDirectory) {
        this(version, existingProjectsDirectory, defaultProjectsDirectory, false);
    }

    public PrjDirUpgradeDialog(String version, File existingProjectsDirectory, File defaultProjectsDirectory, boolean majorUpgrade) {
        initComponents();

        this.version = version;
        this.existingDir = existingProjectsDirectory;
        this.projectsDir = existingProjectsDirectory;
        if (defaultProjectsDirectory != null) {
            this.projectsDir = defaultProjectsDirectory;
        }

        if (majorUpgrade) {
            // this.copyProjectsButton.setSelected(true);
        } else {
            // this.oldProjectsButton.setSelected(true);
        }

        // this.setModal(true);
        this.setSize(this.getPreferredSize());
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        this.rbgPrjDir = new javax.swing.ButtonGroup();
        this.lblCongrats = new javax.swing.JLabel();
        this.lblClearCache = new javax.swing.JLabel();
        this.rbUseCurDir = new javax.swing.JRadioButton();
        this.rbUseNewDir = new javax.swing.JRadioButton();
        this.pnlNewDirFields = new javax.swing.JPanel();
        this.lblChooseDir = new javax.swing.JLabel();
        this.tfNewPrjDir = new javax.swing.JTextField();
        this.btnFileChooser = new javax.swing.JButton();
        this.ckbCopyProjects = new javax.swing.JCheckBox();
        this.btnOk = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/wavemaker/desktop/launcher/ui/Bundle"); // NOI18N
        setTitle(bundle.getString("PrjDirUpgradeDialog.title")); // NOI18N
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        this.lblCongrats.setBackground(new java.awt.Color(255, 255, 255));
        this.lblCongrats.setText(bundle.getString("PrjDirUpgradeDialog.lblCongrats.text")); // NOI18N
        this.lblCongrats.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 342;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 10, 0, 10);
        getContentPane().add(this.lblCongrats, gridBagConstraints);

        this.lblClearCache.setBackground(new java.awt.Color(255, 255, 255));
        this.lblClearCache.setText(bundle.getString("PrjDirUpgradeDialog.lblClearCache.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 331;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 10, 0, 10);
        getContentPane().add(this.lblClearCache, gridBagConstraints);

        this.rbUseCurDir.setBackground(new java.awt.Color(255, 255, 255));
        this.rbgPrjDir.add(this.rbUseCurDir);
        this.rbUseCurDir.setText(bundle.getString("PrjDirUpgradeDialog.rbUseCurDir.text")); // NOI18N
        this.rbUseCurDir.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbUseCurDirActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 313;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 10, 0, 10);
        getContentPane().add(this.rbUseCurDir, gridBagConstraints);

        this.rbUseNewDir.setBackground(new java.awt.Color(255, 255, 255));
        this.rbgPrjDir.add(this.rbUseNewDir);
        this.rbUseNewDir.setText(bundle.getString("PrjDirUpgradeDialog.rbUseNewDir.text")); // NOI18N
        this.rbUseNewDir.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbUseNewDirActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 309;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 10, 0, 10);
        getContentPane().add(this.rbUseNewDir, gridBagConstraints);

        this.pnlNewDirFields.setBackground(new java.awt.Color(255, 255, 255));
        this.pnlNewDirFields.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        this.pnlNewDirFields.setLayout(new java.awt.GridBagLayout());

        this.lblChooseDir.setLabelFor(this.tfNewPrjDir);
        this.lblChooseDir.setText(bundle.getString("PrjDirUpgradeDialog.lblChooseDir.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = -37;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 12, 0, 0);
        this.pnlNewDirFields.add(this.lblChooseDir, gridBagConstraints);

        this.tfNewPrjDir.setEditable(false);
        this.tfNewPrjDir.setText("c:\\dev\\wavemaker");
        this.tfNewPrjDir.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfNewPrjDirActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 307;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 4, 0, 0);
        this.pnlNewDirFields.add(this.tfNewPrjDir, gridBagConstraints);

        this.btnFileChooser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/wavemaker/desktop/launcher/ui/folder.png"))); // NOI18N
        this.btnFileChooser.setText(bundle.getString("PrjDirUpgradeDialog.btnFileChooser.text")); // NOI18N
        this.btnFileChooser.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileChooserActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = -238;
        gridBagConstraints.ipady = -5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 6, 0, 12);
        this.pnlNewDirFields.add(this.btnFileChooser, gridBagConstraints);

        this.ckbCopyProjects.setBackground(new java.awt.Color(255, 255, 255));
        this.ckbCopyProjects.setText(bundle.getString("PrjDirUpgradeDialog.ckbCopyProjects.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 267;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 12, 9, 12);
        this.pnlNewDirFields.add(this.ckbCopyProjects, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 267;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 10, 0, 10);
        getContentPane().add(this.pnlNewDirFields, gridBagConstraints);

        this.btnOk.setText(bundle.getString("PrjDirUpgradeDialog.btnOk.text")); // NOI18N
        this.btnOk.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = -138;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 483, 11, 10);
        getContentPane().add(this.btnOk, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfNewPrjDirActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_tfNewPrjDirActionPerformed
    {// GEN-HEADEREND:event_tfNewPrjDirActionPerformed
     // TODO add your handling code here:
    }// GEN-LAST:event_tfNewPrjDirActionPerformed

    private void btnFileChooserActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnFileChooserActionPerformed
    {// GEN-HEADEREND:event_btnFileChooserActionPerformed
        final JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (this.projectsDir != null) {
            chooser.setCurrentDirectory(this.projectsDir);
        }

        if (chooser.showOpenDialog(getParent()) == JFileChooser.APPROVE_OPTION) {
            this.tfNewPrjDir.setText(chooser.getSelectedFile().getAbsolutePath());
            this.projectsDir = chooser.getCurrentDirectory();
        }
    }// GEN-LAST:event_btnFileChooserActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_btnOkActionPerformed
    {// GEN-HEADEREND:event_btnOkActionPerformed
        boolean success = true;

        if (this.rbUseNewDir.isSelected()) {
            // Test Projects directory
            // Check if path exists
            if (this.projectsDir.exists()) {
                // Check if a directory
                if (this.projectsDir.isDirectory()) {
                    // Check if writable
                    if (!this.ckbCopyProjects.isSelected() && this.projectsDir.canWrite()) {
                        JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Unable to write to \"" + this.projectsDir.getAbsolutePath()
                            + "\".\nPlease correct the permissions or select a different location.", "Error Opening Projects Directory:",
                            JOptionPane.ERROR_MESSAGE);

                        success = false;
                    }
                } else {
                    JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "\"" + this.projectsDir.getAbsolutePath()
                        + "\" is not a directory.\nPlease select a different location.", "Error Opening Projects Directory:",
                        JOptionPane.ERROR_MESSAGE);

                    success = false;
                }
            } else {
                // Create
                if (!this.projectsDir.mkdirs()) {
                    // Unable to create directories
                    JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "", "Error Creating Projects Directory:", JOptionPane.ERROR_MESSAGE);

                    success = false;
                }
            }
        }

        if (success) {
            this.normalClose = true;
            dispose();
        }
    }// GEN-LAST:event_btnOkActionPerformed

    private void rbUseNewDirActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_rbUseNewDirActionPerformed
    {// GEN-HEADEREND:event_rbUseNewDirActionPerformed
        enablePrjDirFields(this.rbUseNewDir.isSelected());
    }// GEN-LAST:event_rbUseNewDirActionPerformed

    private void rbUseCurDirActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_rbUseCurDirActionPerformed
    {// GEN-HEADEREND:event_rbUseCurDirActionPerformed
        enablePrjDirFields(this.rbUseNewDir.isSelected());
    }// GEN-LAST:event_rbUseCurDirActionPerformed

    private void enablePrjDirFields(boolean enable) {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFileChooser;

    private javax.swing.JButton btnOk;

    private javax.swing.JCheckBox ckbCopyProjects;

    private javax.swing.JLabel lblChooseDir;

    private javax.swing.JLabel lblClearCache;

    private javax.swing.JLabel lblCongrats;

    private javax.swing.JPanel pnlNewDirFields;

    private javax.swing.JRadioButton rbUseCurDir;

    private javax.swing.JRadioButton rbUseNewDir;

    private javax.swing.ButtonGroup rbgPrjDir;

    private javax.swing.JTextField tfNewPrjDir;
    // End of variables declaration//GEN-END:variables
}
